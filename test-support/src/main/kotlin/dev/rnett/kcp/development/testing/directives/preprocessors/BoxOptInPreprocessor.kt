package dev.rnett.kcp.development.testing.directives.preprocessors

import dev.rnett.kcp.development.testing.allDirectives
import dev.rnett.kcp.development.testing.directives.UtilityDirectives
import org.jetbrains.kotlin.test.builders.TestConfigurationBuilder
import org.jetbrains.kotlin.test.model.TestFile
import org.jetbrains.kotlin.test.services.DefaultsDsl
import org.jetbrains.kotlin.test.services.ReversibleSourceFilePreprocessor
import org.jetbrains.kotlin.test.services.TestServices
import org.jetbrains.kotlin.test.services.isKtFile

/**
 * Adds an `@OptIn` annotation for classes to the `box` function, if it exists.
 */
public class BoxOptInPreprocessor(testServices: TestServices) : ReversibleSourceFilePreprocessor(testServices) {
    private val flag = "generated by BoxOptInPreprocessor"
    private fun optInString(optIns: Set<String>) = "@OptIn(${optIns.joinToString(", ") { "$it::class" }}) // $flag\n"
    private val boxFun = "fun box("

    override fun process(file: TestFile, content: String): String {
        if (!file.isKtFile || file.isAdditional) return content

        val optIns = testServices.allDirectives(file)[UtilityDirectives.BOX_OPT_IN].toSet()

        if (optIns.isEmpty()) return content

        return content.replace(boxFun, optInString(optIns) + boxFun)
    }

    override fun revert(file: TestFile, actualContent: String): String {
        if (!file.isKtFile || file.isAdditional) return actualContent

        return actualContent.lines().filterNot { flag in it }.joinToString("\n")
    }
}

/**
 * Adds an [OptIn] to tbe `box` function based on [UtilityDirectives.BOX_OPT_IN].
 */
@DefaultsDsl
public fun TestConfigurationBuilder.useBoxOptInPreprocessor(
) {
    useSourcePreprocessor(
        ::BoxOptInPreprocessor
    )
    useDirectives(UtilityDirectives)
}